// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  contact   String   @unique
  username  String
  password  String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           Int                    @id @default(autoincrement())
  name         String
  description  String
  price        Float
  views        Int                    @default(0)
  images       Image[]                @relation("ProductImage")
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  orderDetails OrderDetail[]
  categories   CategoriesOnProducts[]
}

model Order {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  status       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderDetails OrderDetail[]
}

model OrderDetail {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id            Int      @id @default(autoincrement())
  url           String
  width         Int
  resize        Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  imageableId   Int
  imageableType String
  product       Product? @relation("ProductImage", fields: [imageableId], references: [id], map: "product_imageableId")
}

model Category {
  id       Int                    @id @default(autoincrement())
  title    String
  parentId Int?
  parent   Category?              @relation("Children", fields: [parentId], references: [id])
  children Category[]             @relation("Children")
  products CategoriesOnProducts[]
}

model CategoriesOnProducts {
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([productId, categoryId])
}
